/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SharedProtocol_H
#define SharedProtocol_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "shared_types.h"

namespace shared {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SharedProtocolIf {
 public:
  virtual ~SharedProtocolIf() {}
  virtual int32_t serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort) = 0;
  virtual void serviceUnregister(const std::vector<std::string> & methodName) = 0;
};

class SharedProtocolIfFactory {
 public:
  typedef SharedProtocolIf Handler;

  virtual ~SharedProtocolIfFactory() {}

  virtual SharedProtocolIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharedProtocolIf* /* handler */) = 0;
};

class SharedProtocolIfSingletonFactory : virtual public SharedProtocolIfFactory {
 public:
  SharedProtocolIfSingletonFactory(const boost::shared_ptr<SharedProtocolIf>& iface) : iface_(iface) {}
  virtual ~SharedProtocolIfSingletonFactory() {}

  virtual SharedProtocolIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharedProtocolIf* /* handler */) {}

 protected:
  boost::shared_ptr<SharedProtocolIf> iface_;
};

class SharedProtocolNull : virtual public SharedProtocolIf {
 public:
  virtual ~SharedProtocolNull() {}
  int32_t serviceRegister(const std::vector<std::string> & /* methodName */, const int16_t /* sevicePort */) {
    int32_t _return = 0;
    return _return;
  }
  void serviceUnregister(const std::vector<std::string> & /* methodName */) {
    return;
  }
};

typedef struct _SharedProtocol_serviceRegister_args__isset {
  _SharedProtocol_serviceRegister_args__isset() : methodName(false), sevicePort(false) {}
  bool methodName :1;
  bool sevicePort :1;
} _SharedProtocol_serviceRegister_args__isset;

class SharedProtocol_serviceRegister_args {
 public:

  SharedProtocol_serviceRegister_args(const SharedProtocol_serviceRegister_args&);
  SharedProtocol_serviceRegister_args& operator=(const SharedProtocol_serviceRegister_args&);
  SharedProtocol_serviceRegister_args() : sevicePort(0) {
  }

  virtual ~SharedProtocol_serviceRegister_args() throw();
  std::vector<std::string>  methodName;
  int16_t sevicePort;

  _SharedProtocol_serviceRegister_args__isset __isset;

  void __set_methodName(const std::vector<std::string> & val);

  void __set_sevicePort(const int16_t val);

  bool operator == (const SharedProtocol_serviceRegister_args & rhs) const
  {
    if (!(methodName == rhs.methodName))
      return false;
    if (!(sevicePort == rhs.sevicePort))
      return false;
    return true;
  }
  bool operator != (const SharedProtocol_serviceRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedProtocol_serviceRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedProtocol_serviceRegister_pargs {
 public:


  virtual ~SharedProtocol_serviceRegister_pargs() throw();
  const std::vector<std::string> * methodName;
  const int16_t* sevicePort;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedProtocol_serviceRegister_result__isset {
  _SharedProtocol_serviceRegister_result__isset() : success(false) {}
  bool success :1;
} _SharedProtocol_serviceRegister_result__isset;

class SharedProtocol_serviceRegister_result {
 public:

  SharedProtocol_serviceRegister_result(const SharedProtocol_serviceRegister_result&);
  SharedProtocol_serviceRegister_result& operator=(const SharedProtocol_serviceRegister_result&);
  SharedProtocol_serviceRegister_result() : success(0) {
  }

  virtual ~SharedProtocol_serviceRegister_result() throw();
  int32_t success;

  _SharedProtocol_serviceRegister_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SharedProtocol_serviceRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SharedProtocol_serviceRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedProtocol_serviceRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SharedProtocol_serviceRegister_presult__isset {
  _SharedProtocol_serviceRegister_presult__isset() : success(false) {}
  bool success :1;
} _SharedProtocol_serviceRegister_presult__isset;

class SharedProtocol_serviceRegister_presult {
 public:


  virtual ~SharedProtocol_serviceRegister_presult() throw();
  int32_t* success;

  _SharedProtocol_serviceRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SharedProtocol_serviceUnregister_args__isset {
  _SharedProtocol_serviceUnregister_args__isset() : methodName(false) {}
  bool methodName :1;
} _SharedProtocol_serviceUnregister_args__isset;

class SharedProtocol_serviceUnregister_args {
 public:

  SharedProtocol_serviceUnregister_args(const SharedProtocol_serviceUnregister_args&);
  SharedProtocol_serviceUnregister_args& operator=(const SharedProtocol_serviceUnregister_args&);
  SharedProtocol_serviceUnregister_args() {
  }

  virtual ~SharedProtocol_serviceUnregister_args() throw();
  std::vector<std::string>  methodName;

  _SharedProtocol_serviceUnregister_args__isset __isset;

  void __set_methodName(const std::vector<std::string> & val);

  bool operator == (const SharedProtocol_serviceUnregister_args & rhs) const
  {
    if (!(methodName == rhs.methodName))
      return false;
    return true;
  }
  bool operator != (const SharedProtocol_serviceUnregister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedProtocol_serviceUnregister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedProtocol_serviceUnregister_pargs {
 public:


  virtual ~SharedProtocol_serviceUnregister_pargs() throw();
  const std::vector<std::string> * methodName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedProtocol_serviceUnregister_result {
 public:

  SharedProtocol_serviceUnregister_result(const SharedProtocol_serviceUnregister_result&);
  SharedProtocol_serviceUnregister_result& operator=(const SharedProtocol_serviceUnregister_result&);
  SharedProtocol_serviceUnregister_result() {
  }

  virtual ~SharedProtocol_serviceUnregister_result() throw();

  bool operator == (const SharedProtocol_serviceUnregister_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SharedProtocol_serviceUnregister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedProtocol_serviceUnregister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SharedProtocol_serviceUnregister_presult {
 public:


  virtual ~SharedProtocol_serviceUnregister_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SharedProtocolClient : virtual public SharedProtocolIf {
 public:
  SharedProtocolClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SharedProtocolClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort);
  void send_serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort);
  int32_t recv_serviceRegister();
  void serviceUnregister(const std::vector<std::string> & methodName);
  void send_serviceUnregister(const std::vector<std::string> & methodName);
  void recv_serviceUnregister();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharedProtocolProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SharedProtocolIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SharedProtocolProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_serviceRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_serviceUnregister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SharedProtocolProcessor(boost::shared_ptr<SharedProtocolIf> iface) :
    iface_(iface) {
    processMap_["serviceRegister"] = &SharedProtocolProcessor::process_serviceRegister;
    processMap_["serviceUnregister"] = &SharedProtocolProcessor::process_serviceUnregister;
  }

  virtual ~SharedProtocolProcessor() {}
};

class SharedProtocolProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SharedProtocolProcessorFactory(const ::boost::shared_ptr< SharedProtocolIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SharedProtocolIfFactory > handlerFactory_;
};

class SharedProtocolMultiface : virtual public SharedProtocolIf {
 public:
  SharedProtocolMultiface(std::vector<boost::shared_ptr<SharedProtocolIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharedProtocolMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SharedProtocolIf> > ifaces_;
  SharedProtocolMultiface() {}
  void add(boost::shared_ptr<SharedProtocolIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serviceRegister(methodName, sevicePort);
    }
    return ifaces_[i]->serviceRegister(methodName, sevicePort);
  }

  void serviceUnregister(const std::vector<std::string> & methodName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serviceUnregister(methodName);
    }
    ifaces_[i]->serviceUnregister(methodName);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SharedProtocolConcurrentClient : virtual public SharedProtocolIf {
 public:
  SharedProtocolConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SharedProtocolConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort);
  int32_t send_serviceRegister(const std::vector<std::string> & methodName, const int16_t sevicePort);
  int32_t recv_serviceRegister(const int32_t seqid);
  void serviceUnregister(const std::vector<std::string> & methodName);
  int32_t send_serviceUnregister(const std::vector<std::string> & methodName);
  void recv_serviceUnregister(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
