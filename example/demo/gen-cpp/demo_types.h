/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef demo_TYPES_H
#define demo_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace demo {

class DemoStruct;

typedef struct _DemoStruct__isset {
  _DemoStruct__isset() : intValue(false), strValue(false) {}
  bool intValue :1;
  bool strValue :1;
} _DemoStruct__isset;

class DemoStruct : public virtual ::apache::thrift::TBase {
 public:

  DemoStruct(const DemoStruct&);
  DemoStruct& operator=(const DemoStruct&);
  DemoStruct() : intValue(0), strValue() {
  }

  virtual ~DemoStruct() throw();
  int32_t intValue;
  std::string strValue;

  _DemoStruct__isset __isset;

  void __set_intValue(const int32_t val);

  void __set_strValue(const std::string& val);

  bool operator == (const DemoStruct & rhs) const
  {
    if (!(intValue == rhs.intValue))
      return false;
    if (!(strValue == rhs.strValue))
      return false;
    return true;
  }
  bool operator != (const DemoStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DemoStruct &a, DemoStruct &b);

inline std::ostream& operator<<(std::ostream& out, const DemoStruct& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
