/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DemoService_H
#define DemoService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "demo_types.h"

namespace demo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DemoServiceIf {
 public:
  virtual ~DemoServiceIf() {}
  virtual void setStruct(const int32_t intValue, const std::string& strValue) = 0;
  virtual void getStruct(DemoStruct& _return) = 0;
};

class DemoServiceIfFactory {
 public:
  typedef DemoServiceIf Handler;

  virtual ~DemoServiceIfFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DemoServiceIf* /* handler */) = 0;
};

class DemoServiceIfSingletonFactory : virtual public DemoServiceIfFactory {
 public:
  DemoServiceIfSingletonFactory(const boost::shared_ptr<DemoServiceIf>& iface) : iface_(iface) {}
  virtual ~DemoServiceIfSingletonFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DemoServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
};

class DemoServiceNull : virtual public DemoServiceIf {
 public:
  virtual ~DemoServiceNull() {}
  void setStruct(const int32_t /* intValue */, const std::string& /* strValue */) {
    return;
  }
  void getStruct(DemoStruct& /* _return */) {
    return;
  }
};

typedef struct _DemoService_setStruct_args__isset {
  _DemoService_setStruct_args__isset() : intValue(false), strValue(false) {}
  bool intValue :1;
  bool strValue :1;
} _DemoService_setStruct_args__isset;

class DemoService_setStruct_args {
 public:

  DemoService_setStruct_args(const DemoService_setStruct_args&);
  DemoService_setStruct_args& operator=(const DemoService_setStruct_args&);
  DemoService_setStruct_args() : intValue(0), strValue() {
  }

  virtual ~DemoService_setStruct_args() throw();
  int32_t intValue;
  std::string strValue;

  _DemoService_setStruct_args__isset __isset;

  void __set_intValue(const int32_t val);

  void __set_strValue(const std::string& val);

  bool operator == (const DemoService_setStruct_args & rhs) const
  {
    if (!(intValue == rhs.intValue))
      return false;
    if (!(strValue == rhs.strValue))
      return false;
    return true;
  }
  bool operator != (const DemoService_setStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_setStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DemoService_setStruct_pargs {
 public:


  virtual ~DemoService_setStruct_pargs() throw();
  const int32_t* intValue;
  const std::string* strValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DemoService_setStruct_result {
 public:

  DemoService_setStruct_result(const DemoService_setStruct_result&);
  DemoService_setStruct_result& operator=(const DemoService_setStruct_result&);
  DemoService_setStruct_result() {
  }

  virtual ~DemoService_setStruct_result() throw();

  bool operator == (const DemoService_setStruct_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DemoService_setStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_setStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DemoService_setStruct_presult {
 public:


  virtual ~DemoService_setStruct_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DemoService_getStruct_args {
 public:

  DemoService_getStruct_args(const DemoService_getStruct_args&);
  DemoService_getStruct_args& operator=(const DemoService_getStruct_args&);
  DemoService_getStruct_args() {
  }

  virtual ~DemoService_getStruct_args() throw();

  bool operator == (const DemoService_getStruct_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DemoService_getStruct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_getStruct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DemoService_getStruct_pargs {
 public:


  virtual ~DemoService_getStruct_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DemoService_getStruct_result__isset {
  _DemoService_getStruct_result__isset() : success(false) {}
  bool success :1;
} _DemoService_getStruct_result__isset;

class DemoService_getStruct_result {
 public:

  DemoService_getStruct_result(const DemoService_getStruct_result&);
  DemoService_getStruct_result& operator=(const DemoService_getStruct_result&);
  DemoService_getStruct_result() {
  }

  virtual ~DemoService_getStruct_result() throw();
  DemoStruct success;

  _DemoService_getStruct_result__isset __isset;

  void __set_success(const DemoStruct& val);

  bool operator == (const DemoService_getStruct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DemoService_getStruct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_getStruct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DemoService_getStruct_presult__isset {
  _DemoService_getStruct_presult__isset() : success(false) {}
  bool success :1;
} _DemoService_getStruct_presult__isset;

class DemoService_getStruct_presult {
 public:


  virtual ~DemoService_getStruct_presult() throw();
  DemoStruct* success;

  _DemoService_getStruct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DemoServiceClient : virtual public DemoServiceIf {
 public:
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setStruct(const int32_t intValue, const std::string& strValue);
  void send_setStruct(const int32_t intValue, const std::string& strValue);
  void recv_setStruct();
  void getStruct(DemoStruct& _return);
  void send_getStruct();
  void recv_getStruct(DemoStruct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DemoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DemoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStruct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DemoServiceProcessor(boost::shared_ptr<DemoServiceIf> iface) :
    iface_(iface) {
    processMap_["setStruct"] = &DemoServiceProcessor::process_setStruct;
    processMap_["getStruct"] = &DemoServiceProcessor::process_getStruct;
  }

  virtual ~DemoServiceProcessor() {}
};

class DemoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DemoServiceProcessorFactory(const ::boost::shared_ptr< DemoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DemoServiceIfFactory > handlerFactory_;
};

class DemoServiceMultiface : virtual public DemoServiceIf {
 public:
  DemoServiceMultiface(std::vector<boost::shared_ptr<DemoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DemoServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DemoServiceIf> > ifaces_;
  DemoServiceMultiface() {}
  void add(boost::shared_ptr<DemoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setStruct(const int32_t intValue, const std::string& strValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setStruct(intValue, strValue);
    }
    ifaces_[i]->setStruct(intValue, strValue);
  }

  void getStruct(DemoStruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStruct(_return);
    }
    ifaces_[i]->getStruct(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DemoServiceConcurrentClient : virtual public DemoServiceIf {
 public:
  DemoServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DemoServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setStruct(const int32_t intValue, const std::string& strValue);
  int32_t send_setStruct(const int32_t intValue, const std::string& strValue);
  void recv_setStruct(const int32_t seqid);
  void getStruct(DemoStruct& _return);
  int32_t send_getStruct();
  void recv_getStruct(DemoStruct& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
